{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Networking Setup - CSYE 6225 Spring 2020",
	"Parameters": {
		"Environment": {
			"Type": "String",
			"Default": "Production",
			"Description": "The environment of the application deployment"
		},
		"VpcCIDR": {
			"Type": "String",
			"Default": "10.0.0.0/16",
			"Description": "The IP range (CIDR notation) for the VPC"
		},
		"PublicSubnetCIDRs": {
			"Type": "String",
			"Default": "10.0.0.0/24,10.0.1.0/24,10.0.2.0/24",
			"Description": "The IP range (CIDR notation) for the public subnet in the Availability Zone"
		},
		"SubnetAvailabilityZones": {
			"Type": "String",
			"Default": "a,b,c",
			"Description": "The public subnet Availability Zones"
		},
		"RDSUser": {
			"Type": "String",
			"Default": "master"
		},
		"RDSPassword": {
			"Type": "String"
		},
		"RDSDbName": {
			"Type": "String",
			"Default": "csye6225"
		},
		"RDSInstanceClass": {
			"Type": "String",
			"Default": "db.t3.micro"
		},
		"RDSInstanceIdentifier": {
			"Type": "String",
			"Default": "csye6225-spring2020"
		},
		"RDSAllocatedStorage": {
			"Type": "Number",
			"Default": "20"
		},
		"RDSPubliclyAccessible": {
			"Type": "String",
			"Default": "false"
		},
		"RDSMultiAZ": {
			"Type": "String",
			"Default": "false"
		},
		"EC2KeyName": {
			"Type": "AWS::EC2::KeyPair::KeyName"
		},
		"EC2AmiId": {
			"Type": "String"
		},
		"EC2InstanceClass": {
			"Type": "String",
			"Default": "t2.micro"
		},
		"EC2VolumeType": {
			"Type": "String",
			"Default": "gp2"
		},
		"EC2DeviceName": {
			"Type": "String",
			"Default": "/dev/sda1"
		},
		"EC2DeleteOnTermination": {
			"Type": "String",
			"Default": "true"
		},
		"EC2VolumeSize": {
			"Type": "Number",
			"Default": "20"
		},
		"S3CodeDeploy": {
			"Type": "String",
			"Default": "codedeploy.sajalsood.me"
		},
		"RegionCodeDeploy": {
			"Type": "String",
			"Default": "us-east-1"
		},
		"AppCodeDeploy": {
			"Type": "String",
			"Default": "csye6225-webapp"
		},
		"AccountID": {
			"Type": "String",
			"Default": "716807557558"
		},
		"AWSUser": {
			"Type": "String",
			"Default": "circleci"
		},
		"WebAppPort": {
			"Type": "String",
			"Default": "5002"
		},
		"CodeDeployConfigName": {
			"Type": "String",
			"Default": "CodeDeployDefault.AllAtOnce"
		},
		"CodeDeployGroupName": {
			"Type": "String",
			"Default": "csye6225-webapp-deployment"
		},
		"CodeDeployStyleOption": {
			"Type": "String",
			"Default": "WITHOUT_TRAFFIC_CONTROL"
		},
		"CodeDeployStyleType": {
			"Type": "String",
			"Default": "IN_PLACE"
		},
		"WebAppProtocol": {
			"Type": "String",
			"Default": "HTTP"
		},
		"WebAppForwardPort": {
			"Type": "String",
			"Default": "80"
		},
		"AutoScalePublicIpAddress": {
			"Type": "String",
			"Default": "true"
		},
		"AutoScaleGroupName": {
			"Type": "String",
			"Default": "AutoScalingGroup"
		},
		"AutoScaleCoolDown": {
			"Type": "String",
			"Default": "60"
		},
		"AutoScaleDesiredCapacity": {
			"Type": "String",
			"Default": "2"
		},
		"AutoScaleMaxSize": {
			"Type": "String",
			"Default": "5"
		},
		"AutoScaleMinSize": {
			"Type": "String",
			"Default": "2"
		},
		"LoadBalanceAlarmMetricName": {
			"Type": "String",
			"Default": "CPUUtilization"
		},
		"LoadBalanceAlarmNamespace": {
			"Type": "String",
			"Default": "AWS/EC2"
		},
		"LoadBalanceAlarmStatistic": {
			"Type": "String",
			"Default": "Average"
		},
		"LoadBalanceAlarmPeriod": {
			"Type": "String",
			"Default": "300"
		},
		"LoadBalanceAlarmEvalPeriod": {
			"Type": "String",
			"Default": "2"
		},
		"LoadBalanceAlarmHighThreshold": {
			"Type": "String",
			"Default": "90"
		},
		"LoadBalanceAlarmLowThreshold": {
			"Type": "String",
			"Default": "70"
		},
		"AutoScalePolicyType": {
			"Type": "String",
			"Default": "ChangeInCapacity"
		},
		"AutoScalePolicyCooldown": {
			"Type": "String",
			"Default": "60"
		},
		"AutoScaleUpPolicyAdjustment": {
			"Type": "String",
			"Default": "1"
		},
		"AutoScaleDownPolicyAdjustment": {
			"Type": "String",
			"Default": "-1"
		},
		"HostedZoneName": {
			"Type": "String",
			"Default": "sajalsood.me."
		},
		"DDBTableName": {
			"Type": "String",
			"Default": "DUE_BILL_EMAIL_DB"
		},
		"EmailLambdaZip": {
			"Type": "String",
			"Default": "sendemail.zip"
		},
		"EmailLambdaRuntime": {
			"Type": "String",
			"Default": "nodejs12.x"
		},
		"EmailLambdaHandler": {
			"Type": "String",
			"Default": "index.handler"
		},
		"SNSTopicName": {
			"Type": "String"
		},
		"SQSQueueName": {
			"Type": "String"
		},
		"DDBTableTTL" : {
			"Type" : "String"
		},
		"SendEmailFunction" : {
			"Type" : "String"
		},
		"SendEmailSource": {
			"Type" : "String"
		}
	},
	"Resources": {
		"ApiVPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"EnableDnsSupport": true,
				"EnableDnsHostnames": true,
				"CidrBlock": {
					"Ref": "VpcCIDR"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-VPC"
					}
				}]
			}
		},
		"PublicSubnet1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "ApiVPC"
				},
				"CidrBlock": {
					"Fn::Select": ["0",
						{
							"Fn::Split": [",", {
								"Ref": "PublicSubnetCIDRs"
							}]
						}
					]
				},
				"AvailabilityZone": {
					"Fn::Join": ["",
						[{
								"Ref": "AWS::Region"
							},
							{
								"Fn::Select": ["0",
									{
										"Fn::Split": [",", {
											"Ref": "SubnetAvailabilityZones"
										}]
									}
								]
							}
						]
					]
				},
				"MapPublicIpOnLaunch": true,
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-Subnet1"
					}
				}]
			},
			"DependsOn": "ApiVPC"
		},
		"PublicSubnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "ApiVPC"
				},
				"CidrBlock": {
					"Fn::Select": ["1",
						{
							"Fn::Split": [",", {
								"Ref": "PublicSubnetCIDRs"
							}]
						}
					]
				},
				"AvailabilityZone": {
					"Fn::Join": ["",
						[{
								"Ref": "AWS::Region"
							},
							{
								"Fn::Select": ["1",
									{
										"Fn::Split": [",", {
											"Ref": "SubnetAvailabilityZones"
										}]
									}
								]
							}
						]
					]
				},
				"MapPublicIpOnLaunch": true,
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-Subnet2"
					}
				}]
			},
			"DependsOn": "ApiVPC"
		},
		"PublicSubnet3": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "ApiVPC"
				},
				"CidrBlock": {
					"Fn::Select": ["2",
						{
							"Fn::Split": [",", {
								"Ref": "PublicSubnetCIDRs"
							}]
						}
					]
				},
				"AvailabilityZone": {
					"Fn::Join": ["",
						[{
								"Ref": "AWS::Region"
							},
							{
								"Fn::Select": ["2",
									{
										"Fn::Split": [",", {
											"Ref": "SubnetAvailabilityZones"
										}]
									}
								]
							}
						]
					]
				},
				"MapPublicIpOnLaunch": true,
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-Subnet3"
					}
				}]
			},
			"DependsOn": "ApiVPC"
		},
		"IGW": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-IG"
					}
				}]
			}
		},
		"VPCGatewayAttachment": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"InternetGatewayId": {
					"Ref": "IGW"
				},
				"VpcId": {
					"Ref": "ApiVPC"
				}
			},
			"DependsOn": ["ApiVPC", "IGW"]
		},
		"PublicSubnetRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "ApiVPC"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-RouteTable"
					}
				}]
			},
			"DependsOn": "ApiVPC"
		},
		"PublicSubnetRoute": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicSubnetRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "IGW"
				}
			},
			"DependsOn": ["PublicSubnetRouteTable", "IGW"]
		},
		"PublicSubnet1RouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet1"
				},
				"RouteTableId": {
					"Ref": "PublicSubnetRouteTable"
				}
			},
			"DependsOn": ["PublicSubnetRouteTable", "PublicSubnet1"]
		},
		"PublicSubnet2RouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet2"
				},
				"RouteTableId": {
					"Ref": "PublicSubnetRouteTable"
				}
			},
			"DependsOn": ["PublicSubnetRouteTable", "PublicSubnet2"]
		},
		"PublicSubnet3RouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet3"
				},
				"RouteTableId": {
					"Ref": "PublicSubnetRouteTable"
				}
			},
			"DependsOn": ["PublicSubnetRouteTable", "PublicSubnet3"]
		},
		"EC2SecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupName": "application",
				"GroupDescription": "Access to the EC2 Instance",
				"VpcId": {
					"Ref": "ApiVPC" 
				},
				"SecurityGroupIngress": [
					{
						"SourceSecurityGroupId": {
							"Fn::GetAtt" : ["ELBSecurityGroup", "GroupId"]
						},
						"IpProtocol": "tcp",
						"FromPort": {
							"Ref": "WebAppPort"
						},
						"ToPort": {
							"Ref": "WebAppPort"
						}
					}
				],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-EC2-SG"
					}
				}]
			},
			"DependsOn": ["ApiVPC", "ELBSecurityGroup"]
		},
		"ELBSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupName": "loadbalancer",
				"GroupDescription": "Access to the ELB",
				"VpcId": {
					"Ref": "ApiVPC" 
				},
				"SecurityGroupIngress": [{
						"CidrIp": "0.0.0.0/0",
						"IpProtocol": "tcp",
						"FromPort": 22,
						"ToPort": 22
					},
					{
						"CidrIp": "0.0.0.0/0",
						"IpProtocol": "tcp",
						"FromPort": 80,
						"ToPort": 80
					},
					{
						"CidrIp": "0.0.0.0/0",
						"IpProtocol": "tcp",
						"FromPort": 443,
						"ToPort": 443
					}
				],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-ELB-SG"
					}
				}]
			},
			"DependsOn": "ApiVPC"
		},
		"RDSSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupName": "database",
				"GroupDescription": "Access to the RDS",
				"VpcId": {
					"Ref": "ApiVPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": 5432,
					"ToPort": 5432,
					"SourceSecurityGroupId": {
						"Fn::GetAtt": [
							"EC2SecurityGroup",
							"GroupId"
						]
					}
				}],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-RDS-SG"
					}
				}]
			},
			"DependsOn": ["ApiVPC", "EC2SecurityGroup"]
		},
		"RDSSubnetGroup": {
			"Type": "AWS::RDS::DBSubnetGroup",
			"Properties": {
				"DBSubnetGroupDescription": "RDS Subnet group for Postgres Serverless",
				"DBSubnetGroupName": {
					"Fn::Sub": "${AWS::StackName}-postgres-subnet-group"
				},
				"SubnetIds": [{
						"Ref": "PublicSubnet1"
					},
					{
						"Ref": "PublicSubnet2"
					},
					{
						"Ref": "PublicSubnet3"
					}
				],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-RDS-Subnet-Group"
					}
				}]
			},
			"DependsOn": ["PublicSubnet1", "PublicSubnet2", "PublicSubnet3"]
		},
		"RDSDBInstance": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"Engine": "postgres",
				"AllocatedStorage": {
					"Ref": "RDSAllocatedStorage"
				},
				"MultiAZ": {
					"Ref": "RDSMultiAZ"
				},
				"DBInstanceClass": {
					"Ref": "RDSInstanceClass"
				},
				"DBInstanceIdentifier": {
					"Fn::Join": [
						"-",
						[{
								"Fn::Sub": "${AWS::StackName}"
							},
							{
								"Ref": "RDSInstanceIdentifier"
							}
						]
					]
				},
				"MasterUsername": {
					"Ref": "RDSUser"
				},
				"MasterUserPassword": {
					"Ref": "RDSPassword"
				},
				"DBName": {
					"Ref": "RDSDbName"
				},
				"DBSubnetGroupName": {
					"Ref": "RDSSubnetGroup"
				},
				"VPCSecurityGroups": [{
					"Ref": "RDSSecurityGroup"
				}],
				"PubliclyAccessible": {
					"Ref": "RDSPubliclyAccessible"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-RDS-DB-Instance"
					}
				}]
			},
			"DependsOn": ["RDSSubnetGroup", "RDSSecurityGroup"]
		},
		"S3Bucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"AccessControl": "Private",
				"BucketEncryption": {
					"ServerSideEncryptionConfiguration": [{
						"ServerSideEncryptionByDefault": {
							"SSEAlgorithm": "AES256"
						}
					}]
				},
				"LifecycleConfiguration": {
					"Rules": [{
						"Id": "StorageIARule",
						"Status": "Enabled",
						"Transitions": [{
							"TransitionInDays": "30",
							"StorageClass": "STANDARD_IA"
						}]
					}]
				}
			},
			"DeletionPolicy": "Delete"
		},
		"CodeDeployEC2S3Policy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": {
					"Fn::Sub": "${AWS::StackName}-CodeDeploy-EC2-S3"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
							"Sid": "VisualEditor0",
							"Effect": "Allow",
							"Action": [
								"s3:GetObject",
								"s3:ListBucket"
							],
							"Resource": [{
									"Fn::Sub": ["arn:aws:s3:::${Bucket}", {
										"Bucket": {
											"Ref": "S3CodeDeploy"
										}
									}]
								},
								{
									"Fn::Sub": ["arn:aws:s3:::${Bucket}/*", {
										"Bucket": {
											"Ref": "S3CodeDeploy"
										}
									}]
								}
							]
						},
						{
							"Effect": "Allow",
							"Action": [
								"s3:PutObject",
								"s3:GetObject",
								"s3:DeleteObject",
								"s3:ListBucket"
							],
							"Resource": [{
									"Fn::GetAtt": ["S3Bucket", "Arn"]
								},
								{
									"Fn::Join": [
										"", [{
											"Fn::GetAtt": ["S3Bucket", "Arn"]
										}, "/*"]
									]
								}
							]
						}
					]
				},
				"Roles": [{
					"Ref": "CodeDeployEC2ServiceRole"
				}]
			},
			"DependsOn": ["S3Bucket", "CodeDeployEC2ServiceRole"]
		},
		"CircleCIUploadToS3Policy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": {
					"Fn::Sub": "${AWS::StackName}-CircleCI-Upload-To-S3"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Sid": "VisualEditor0",
						"Effect": "Allow",
						"Action": [
							"s3:PutObject",
							"s3:GetObject",
							"s3:ListBucket"
						],
						"Resource": [{
								"Fn::Sub": ["arn:aws:s3:::${Bucket}", {
									"Bucket": {
										"Ref": "S3CodeDeploy"
									}
								}]
							},
							{
								"Fn::Sub": ["arn:aws:s3:::${Bucket}/*", {
									"Bucket": {
										"Ref": "S3CodeDeploy"
									}
								}]
							}
						]
					}]
				},
				"Users": [{
					"Ref": "AWSUser"
				}]
			}
		},
		"CircleCICodeDeployPolicy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": {
					"Fn::Sub": "${AWS::StackName}-CircleCI-Code-Deploy"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
							"Effect": "Allow",
							"Action": [
								"codedeploy:GetApplicationRevision",
								"codedeploy:RegisterApplicationRevision"
							],
							"Resource": [{
								"Fn::Sub": [
									"arn:aws:codedeploy:${Region}:${Account}:application:${Application}",
									{
										"Region": {
											"Ref": "RegionCodeDeploy"
										},
										"Account": {
											"Ref": "AccountID"
										},
										"Application": {
											"Ref": "AppCodeDeploy"
										}
									}
								]
							}]
						},
						{
							"Effect": "Allow",
							"Action": [
								"codedeploy:CreateDeployment",
								"codedeploy:GetDeployment"
							],
							"Resource": [
								"*"
							]
						},
						{
							"Effect": "Allow",
							"Action": [
								"codedeploy:GetDeploymentConfig"
							],
							"Resource": [{
									"Fn::Sub": [
										"arn:aws:codedeploy:${Region}:${Account}:deploymentconfig:CodeDeployDefault.OneAtATime",
										{
											"Region": {
												"Ref": "RegionCodeDeploy"
											},
											"Account": {
												"Ref": "AccountID"
											}
										}
									]
								},
								{
									"Fn::Sub": [
										"arn:aws:codedeploy:${Region}:${Account}:deploymentconfig:CodeDeployDefault.HalfAtATime",
										{
											"Region": {
												"Ref": "RegionCodeDeploy"
											},
											"Account": {
												"Ref": "AccountID"
											}
										}
									]
								},
								{
									"Fn::Sub": [
										"arn:aws:codedeploy:${Region}:${Account}:deploymentconfig:CodeDeployDefault.AllAtOnce",
										{
											"Region": {
												"Ref": "RegionCodeDeploy"
											},
											"Account": {
												"Ref": "AccountID"
											}
										}
									]
								}
							]
						}
					]
				},
				"Users": [{
					"Ref": "AWSUser"
				}]
			}
		},
		"CodeDeployEC2ServiceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": {
					"Fn::Sub": "${AWS::StackName}-CodeDeployEC2ServiceRole"
				},
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"ec2.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
				]
			}
		},
		"CodeDeployServiceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": {
					"Fn::Sub": "${AWS::StackName}-CodeDeployServiceRole"
				},
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"codedeploy.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
				]
			}
		},
		"EC2S3InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Roles": [{
					"Ref": "CodeDeployEC2ServiceRole"
				}]
			},
			"DependsOn": ["CodeDeployEC2ServiceRole"]
		},
		"CodeDeployApp": {
			"Type": "AWS::CodeDeploy::Application",
			"Properties": {
				"ApplicationName": {
					"Ref": "AppCodeDeploy"
				},
				"ComputePlatform": "Server"
			}
		},
		"CodeDeployGroup": {
			"Type": "AWS::CodeDeploy::DeploymentGroup",
			"Properties": {
				"ApplicationName": {
					"Ref": "CodeDeployApp"
				},
				"AutoRollbackConfiguration": {
					"Enabled": "true",
					"Events": ["DEPLOYMENT_FAILURE"]
				},
				"AutoScalingGroups": [{
					"Ref": "AutoScalingGroup"
				}],
				"DeploymentConfigName": {
					"Ref": "CodeDeployConfigName"
				},
				"DeploymentGroupName": {
					"Ref": "CodeDeployGroupName"
				},
				"DeploymentStyle": {
					"DeploymentOption": {
						"Ref": "CodeDeployStyleOption"
					},
					"DeploymentType": {
						"Ref": "CodeDeployStyleType"
					}
				},
				"Ec2TagFilters": [{
					"Key": "EC2-Code-Deploy",
					"Value": "EC2-Code-Deploy",
					"Type": "KEY_AND_VALUE"
				}],
				"ServiceRoleArn": {
					"Fn::GetAtt": ["CodeDeployServiceRole", "Arn"]
				}
			},
			"DependsOn": ["CodeDeployServiceRole", "CodeDeployApp", "AutoScalingGroup"]
		},
		"EC2LoadBalancer": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties": {
				"Name": "EC2LoadBalancer",
				"SecurityGroups": [{
					"Ref": "ELBSecurityGroup"
				}],
				"Subnets": [{
					"Ref": "PublicSubnet1"
				}, {
					"Ref": "PublicSubnet2"
				}, {
					"Ref": "PublicSubnet3"
				}]
			},
			"DependsOn": ["ELBSecurityGroup", "PublicSubnet1", "PublicSubnet2", "PublicSubnet3"]
		},
		"EC2TargetGroup": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"Name": "EC2TargetGroup",
				"Port": {
					"Ref": "WebAppPort"
				},
				"Protocol": {
					"Ref": "WebAppProtocol"
				},
				"VpcId": {
					"Ref": "ApiVPC"
				}
			},
			"DependsOn": ["ApiVPC", "EC2LoadBalancer"]
		},
		"EC2LoadBalancerListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [{
					"TargetGroupArn": {
						"Ref": "EC2TargetGroup"
					},
					"Type": "forward"
				}],
				"LoadBalancerArn": {
					"Ref": "EC2LoadBalancer"
				},
				"Port": {
					"Ref": "WebAppForwardPort"
				},
				"Protocol": {
					"Ref": "WebAppProtocol"
				}
			},
			"DependsOn": ["EC2LoadBalancer", "EC2TargetGroup"]
		},
		"AutoScalingLaunchConfig": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Properties": {
				"AssociatePublicIpAddress": {
					"Ref": "AutoScalePublicIpAddress"
				},
				"BlockDeviceMappings": [{
					"DeviceName": {
						"Ref": "EC2DeviceName"
					},
					"Ebs": {
						"VolumeType": {
							"Ref": "EC2VolumeType"
						},
						"DeleteOnTermination": {
							"Ref": "EC2DeleteOnTermination"
						},
						"VolumeSize": {
							"Ref": "EC2VolumeSize"
						}
					}
				}],
				"IamInstanceProfile": {
					"Ref": "EC2S3InstanceProfile"
				},
				"ImageId": {
					"Ref": "EC2AmiId"
				},
				"InstanceType": {
					"Ref": "EC2InstanceClass"
				},
				"KeyName": {
					"Ref": "EC2KeyName"
				},
				"LaunchConfigurationName": "AutoScalingLaunchConfig",
				"SecurityGroups": [{
					"Ref": "EC2SecurityGroup"
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"\n", ["#!/bin/bash -xe",
								{
									"Fn::Join": ["", ["echo ", {
										"Fn::Join": ["",
											[
												"DOTNET_CLI_HOME=/tmp"
											]
										]
									}, " >> /etc/environment"]]
								},
								{
									"Fn::Join": ["", ["echo ", {
										"Fn::Join": ["",
											[
												"ASPNETCORE_ENVIRONMENT=",
												{
													"Ref": "Environment"
												}
											]
										]
									}, " >> /etc/environment"]]
								},
								{
									"Fn::Join": ["", ["echo ", {
										"Fn::Join": ["",
											[
												"ConnectionStrings__DBConnection=",
												"\"\\\"Host=", {
													"Fn::GetAtt": ["RDSDBInstance", "Endpoint.Address"]
												},
												";Port=", {
													"Fn::GetAtt": ["RDSDBInstance", "Endpoint.Port"]
												},
												";Username=", {
													"Ref": "RDSUser"
												},
												";Password=", {
													"Ref": "RDSPassword"
												},
												";Database=", {
													"Ref": "RDSDbName"
												},
												";\\\"\""
											]
										]
									}, " >> /etc/environment"]]
								},
								{
									"Fn::Join": ["", ["echo ", {
										"Fn::Join": ["",
											[
												"AWS__BILL_BUCKET_NAME=",
												{
													"Ref": "S3Bucket"
												}
											]
										]
									}, " >> /etc/environment"]]
								},
								{
									"Fn::Join": ["", ["echo ", {
										"Fn::Join": ["",
											[
												"AWS__SQS_URL=",
												{
													"Ref": "SQSQueue"
												}
											]
										]
									}, " >> /etc/environment"]]
								},
								{
									"Fn::Join": ["", ["echo ", {
										"Fn::Join": ["",
											[
												"AWS__APP_URL=",
												{
													"Ref": "HostedZoneName"
												}
											]
										]
									}, " >> /etc/environment"]]
								},
								{
									"Fn::Join": ["", ["echo ", {
										"Fn::Join": ["",
											[
												"AWS__SNS_TOPIC=",
												{ "Ref": "SNSTopic" }
											]
										]
									}, " >> /etc/environment"]]
								}
							]
						]
					}
				}
			},
			"DependsOn": ["EC2S3InstanceProfile", "EC2SecurityGroup", "SQSQueue", "SNSTopic"]
		},
		"AutoScalingGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"AutoScalingGroupName": {
					"Ref": "AutoScaleGroupName"
				},
				"AvailabilityZones": [{
						"Fn::Join": ["",
							[{
									"Ref": "AWS::Region"
								},
								{
									"Fn::Select": ["0",
										{
											"Fn::Split": [",", {
												"Ref": "SubnetAvailabilityZones"
											}]
										}
									]
								}
							]
						]
					},
					{
						"Fn::Join": ["",
							[{
									"Ref": "AWS::Region"
								},
								{
									"Fn::Select": ["1",
										{
											"Fn::Split": [",", {
												"Ref": "SubnetAvailabilityZones"
											}]
										}
									]
								}
							]
						]
					},
					{
						"Fn::Join": ["",
							[{
									"Ref": "AWS::Region"
								},
								{
									"Fn::Select": ["2",
										{
											"Fn::Split": [",", {
												"Ref": "SubnetAvailabilityZones"
											}]
										}
									]
								}
							]
						]
					}
				],
				"Cooldown": {
					"Ref": "AutoScaleCoolDown"
				},
				"DesiredCapacity": {
					"Ref": "AutoScaleDesiredCapacity"
				},
				"LaunchConfigurationName": {
					"Ref": "AutoScalingLaunchConfig"
				},
				"MaxSize": {
					"Ref": "AutoScaleMaxSize"
				},
				"MinSize": {
					"Ref": "AutoScaleMinSize"
				},
				"Tags": [{
					"Key": "EC2-Code-Deploy",
					"PropagateAtLaunch": "true",
					"Value": "EC2-Code-Deploy"
				}],
				"TargetGroupARNs": [{
					"Ref": "EC2TargetGroup"
				}],
				"VPCZoneIdentifier": [{
						"Ref": "PublicSubnet1"
					},
					{
						"Ref": "PublicSubnet2"
					},
					{
						"Ref": "PublicSubnet3"
					}
				]
			},
			"DependsOn": ["AutoScalingLaunchConfig", "EC2TargetGroup", "PublicSubnet1", "PublicSubnet2", "PublicSubnet3"]
		},
		"LoadBalancerAlarmHigh": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "Scale-up if CPU Utilization High",
				"MetricName": {
					"Ref": "LoadBalanceAlarmMetricName"
				},
				"Namespace": {
					"Ref": "LoadBalanceAlarmNamespace"
				},
				"Statistic": {
					"Ref": "LoadBalanceAlarmStatistic"
				},
				"Period": {
					"Ref": "LoadBalanceAlarmPeriod"
				},
				"EvaluationPeriods": {
					"Ref": "LoadBalanceAlarmEvalPeriod"
				},
				"Threshold": {
					"Ref": "LoadBalanceAlarmHighThreshold"
				},
				"AlarmActions": [{
					"Ref": "WebServerScaleUpPolicy"
				}],
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "AutoScalingGroup"
					}
				}],
				"ComparisonOperator": "GreaterThanThreshold"
			},
			"DependsOn": ["AutoScalingGroup", "WebServerScaleUpPolicy"]
		},
		"LoadBalancerAlarmLow": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "Scale-down if CPU Utilization Low",
				"MetricName": {
					"Ref": "LoadBalanceAlarmMetricName"
				},
				"Namespace": {
					"Ref": "LoadBalanceAlarmNamespace"
				},
				"Statistic": {
					"Ref": "LoadBalanceAlarmStatistic"
				},
				"Period": {
					"Ref": "LoadBalanceAlarmPeriod"
				},
				"EvaluationPeriods": {
					"Ref": "LoadBalanceAlarmEvalPeriod"
				},
				"Threshold": {
					"Ref": "LoadBalanceAlarmLowThreshold"
				},
				"AlarmActions": [{
					"Ref": "WebServerScaleDownPolicy"
				}],
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "AutoScalingGroup"
					}
				}],
				"ComparisonOperator": "LessThanThreshold"
			},
			"DependsOn": ["AutoScalingGroup", "WebServerScaleDownPolicy"]
		},
		"WebServerScaleUpPolicy": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": {
					"Ref": "AutoScalePolicyType"
				},
				"AutoScalingGroupName": {
					"Ref": "AutoScalingGroup"
				},
				"Cooldown": {
					"Ref": "AutoScalePolicyCooldown"
				},
				"ScalingAdjustment": {
					"Ref": "AutoScaleUpPolicyAdjustment"
				}
			},
			"DependsOn": ["AutoScalingGroup"]
		},
		"WebServerScaleDownPolicy": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": {
					"Ref": "AutoScalePolicyType"
				},
				"AutoScalingGroupName": {
					"Ref": "AutoScalingGroup"
				},
				"Cooldown": {
					"Ref": "AutoScalePolicyCooldown"
				},
				"ScalingAdjustment": {
					"Ref": "AutoScaleDownPolicyAdjustment"
				}
			},
			"DependsOn": ["AutoScalingGroup"]
		},
		"DNSRecordSetGroup": {
			"Type": "AWS::Route53::RecordSetGroup",
			"Properties": {
				"HostedZoneName": {
					"Ref": "HostedZoneName"
				},
				"RecordSets": [{
						"Name": {
							"Fn::Sub": ["${HostName}.", {
								"HostName": {
									"Ref": "HostedZoneName"
								}
							}]
						},
						"Type": "A",
						"AliasTarget": {
							"HostedZoneId": {
								"Fn::GetAtt": ["EC2LoadBalancer", "CanonicalHostedZoneID"]
							},
							"DNSName": {
								"Fn::GetAtt": ["EC2LoadBalancer", "DNSName"]
							}
						}
					},
					{
						"Name": {
							"Fn::Sub": ["www.${HostName}.", {
								"HostName": {
									"Ref": "HostedZoneName"
								}
							}]
						},
						"Type": "A",
						"AliasTarget": {
							"HostedZoneId": {
								"Fn::GetAtt": ["EC2LoadBalancer", "CanonicalHostedZoneID"]
							},
							"DNSName": {
								"Fn::GetAtt": ["EC2LoadBalancer", "DNSName"]
							}
						}
					}
				]
			},
			"DependsOn": ["EC2LoadBalancer"]
		},
		"SQSQueue" : {
			"Type" : "AWS::SQS::Queue",
			"Properties" : {
				"QueueName" : {
					"Fn::Join": [
						"-",
							[{
								"Fn::Sub": "${AWS::StackName}"
							},
							{
								"Ref": "SQSQueueName"
							}
						]
					]
				}
			}
		},
		"SNSTopic": {
			"Type" : "AWS::SNS::Topic",
			"Properties" : {
				"DisplayName" : {
					"Fn::Join": [
						"-",
							[{
								"Fn::Sub": "${AWS::StackName}"
							},
							{
								"Ref": "SNSTopicName"
							}
						]
					]
				},
				"Subscription" : [{
					"Endpoint" : { "Fn::GetAtt" : [ "SendEmailLambdaFunction", "Arn" ] },
					"Protocol" : "lambda"
				}],
				"TopicName" : {
					"Fn::Join": [
						"-",
							[{
								"Fn::Sub": "${AWS::StackName}"
							},
							{
								"Ref": "SNSTopicName"
							}
						]
					]
				}
			},
			"DependsOn": ["SendEmailLambdaFunction"]
		},
		"LambdaExecutionRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
			  "AssumeRolePolicyDocument": {
				"Version": "2012-10-17",
				"Statement": [
					{ 
						"Effect": "Allow", 
						"Principal": {
							"Service": ["lambda.amazonaws.com"]
						}, 
						"Action": ["sts:AssumeRole"] 
					}
				]
			  },
			  "ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
					"arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
					"arn:aws:iam::aws:policy/AmazonSNSFullAccess",
					"arn:aws:iam::aws:policy/AmazonSESFullAccess",
					"arn:aws:iam::aws:policy/AmazonS3FullAccess"
				]	
			}
		},
		"SendEmailLambdaFunction": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
			  "FunctionName" : {
				"Fn::Join": [
					"-",
						[{
							"Fn::Sub": "${AWS::StackName}"
						},
						{
							"Ref": "SendEmailFunction"
						}
					]
				]
				},
			  "Handler": { "Ref": "EmailLambdaHandler" },
			  "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
			  "Code": {
				"S3Bucket":  { "Ref": "S3CodeDeploy" },
				"S3Key" :  { "Ref": "EmailLambdaZip" }
				},
			  "Runtime": { "Ref": "EmailLambdaRuntime" },
			  "Environment" : {
				"Variables" : { 
					"ddb_table_name": { "Ref" : "DDBTableName" },
					"ttl" : { "Ref" : "DDBTableTTL"},
					"source" : {
						"Fn::Join": [
							"@",
								[{
									"Ref": "SendEmailSource"
								},
								{
									"Ref": "HostedZoneName"
								}
							]
						]
						}
				}
			  }
			},
			"DependsOn": ["LambdaExecutionRole"]
		},
		"LambdaInvokePermission": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
			  "Action": "lambda:InvokeFunction",
			  "Principal": "sns.amazonaws.com",
			  "SourceArn": { "Ref": "SNSTopic" },
			  "FunctionName": {
				"Fn::GetAtt": [ "SendEmailLambdaFunction", "Arn" ]
			  }
			},
			"DependsOn": ["SendEmailLambdaFunction", "SNSTopic"]
		},
		"EmailDynamo" :  {
			"Type" : "AWS::DynamoDB::Table",
			"Properties" : {
			  "AttributeDefinitions" : [
				{
					"AttributeName" : "email",
					"AttributeType" : "S"   
				}
			  ],
			  "KeySchema" : [
				{
					"AttributeName" : "email",
					"KeyType" : "HASH"
				}
			  ],
			  "ProvisionedThroughput" : {
				"ReadCapacityUnits" : "1",
				"WriteCapacityUnits" : "1"
			  },
			  "TimeToLiveSpecification": {
				"AttributeName": "expires_at",
				"Enabled": "true"
			  },
			  "TableName" : { "Ref": "DDBTableName" }
			}
		}
	},
	"Outputs": {
		"VPCId": {
			"Description": "VPC Id of the newly created VPC",
			"Value": {
				"Ref": "ApiVPC"
			}
		}
	}
}