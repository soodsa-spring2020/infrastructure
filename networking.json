{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Networking Setup - CSYE 6225 Spring 2020",
	"Parameters": {
		"VpcCIDR": {
			"Type": "String",
			"Default": "10.0.0.0/16",
			"Description": "The IP range (CIDR notation) for the VPC"
		},
		"PublicSubnetCIDRs": {
			"Type": "String",
			"Default": "10.0.0.0/24,10.0.1.0/24,10.0.2.0/24",
			"Description": "The IP range (CIDR notation) for the public subnet in the Availability Zone"
		},
		"SubnetAvailabilityZones": {
			"Type": "String",
			"Default": "a,b,c",
			"Description": "The public subnet Availability Zones"
		},
		"RDSUser": {
			"Type": "String",
			"Default": "master"
		},
		"RDSPassword": {
			"Type": "String"
		},
		"RDSDbName": {
			"Type": "String",
			"Default": "csye6225"
		},
		"RDSInstanceClass": {
			"Type": "String",
			"Default": "db.t3.micro"
		},
		"RDSInstanceIdentifier": {
			"Type": "String",
			"Default": "csye6225-spring2020"
		},
		"RDSAllocatedStorage": {
			"Type": "Number",
			"Default": "20"
		},
		"RDSPubliclyAccessible": {
			"Type": "String",
			"Default": "false"
		},
		"RDSMultiAZ": {
			"Type": "String",
			"Default": "false"
		},
		"EC2KeyName": {
			"Type": "AWS::EC2::KeyPair::KeyName"
		},
		"EC2AmiId": {
			"Type": "String"
		},
		"EC2InstanceClass": {
			"Type": "String",
			"Default": "t2.micro"
		},
		"EC2SubnetChoice": {
			"Type": "Number",
			"Default": "0"
		},
		"EC2VolumeType": {
			"Type": "String",
			"Default": "gp2"
		},
		"EC2DeviceName": {
			"Type": "String",
			"Default": "/dev/sda1"
		},
		"EC2DeleteOnTermination": {
			"Type": "String",
			"Default": "true"
		},
		"EC2VolumeSize": {
			"Type": "Number",
			"Default": "20"
		}
	},
	"Resources": {
		"ApiVPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"EnableDnsSupport": true,
				"EnableDnsHostnames": true,
				"CidrBlock": {
					"Ref": "VpcCIDR"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-VPC"
					}
				}]
			}
		},
		"PublicSubnet1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "ApiVPC"
				},
				"CidrBlock": {
					"Fn::Select": ["0",
						{
							"Fn::Split": [",", {
								"Ref": "PublicSubnetCIDRs"
							}]
						}
					]
				},
				"AvailabilityZone": {
					"Fn::Join": ["",
						[{
								"Ref": "AWS::Region"
							},
							{
								"Fn::Select": ["0",
									{
										"Fn::Split": [",", {
											"Ref": "SubnetAvailabilityZones"
										}]
									}
								]
							}
						]
					]
				},
				"MapPublicIpOnLaunch": true,
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-Subnet1"
					}
				}]
			},
			"DependsOn": "ApiVPC"
		},
		"PublicSubnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "ApiVPC"
				},
				"CidrBlock": {
					"Fn::Select": ["1",
						{
							"Fn::Split": [",", {
								"Ref": "PublicSubnetCIDRs"
							}]
						}
					]
				},
				"AvailabilityZone": {
					"Fn::Join": ["",
						[{
								"Ref": "AWS::Region"
							},
							{
								"Fn::Select": ["1",
									{
										"Fn::Split": [",", {
											"Ref": "SubnetAvailabilityZones"
										}]
									}
								]
							}
						]
					]
				},
				"MapPublicIpOnLaunch": true,
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-Subnet2"
					}
				}]
			},
			"DependsOn": "ApiVPC"
		},
		"PublicSubnet3": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "ApiVPC"
				},
				"CidrBlock": {
					"Fn::Select": ["2",
						{
							"Fn::Split": [",", {
								"Ref": "PublicSubnetCIDRs"
							}]
						}
					]
				},
				"AvailabilityZone": {
					"Fn::Join": ["",
						[{
								"Ref": "AWS::Region"
							},
							{
								"Fn::Select": ["2",
									{
										"Fn::Split": [",", {
											"Ref": "SubnetAvailabilityZones"
										}]
									}
								]
							}
						]
					]
				},
				"MapPublicIpOnLaunch": true,
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-Subnet3"
					}
				}]
			},
			"DependsOn": "ApiVPC"
		},
		"IGW": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-IG"
					}
				}]
			}
		},
		"VPCGatewayAttachment": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"InternetGatewayId": {
					"Ref": "IGW"
				},
				"VpcId": {
					"Ref": "ApiVPC"
				}
			},
			"DependsOn": ["ApiVPC", "IGW"]
		},
		"PublicSubnetRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "ApiVPC"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-RouteTable"
					}
				}]
			},
			"DependsOn": "ApiVPC"
		},
		"PublicSubnetRoute": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicSubnetRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "IGW"
				}
			},
			"DependsOn": ["PublicSubnetRouteTable", "IGW"]
		},
		"PublicSubnet1RouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet1"
				},
				"RouteTableId": {
					"Ref": "PublicSubnetRouteTable"
				}
			},
			"DependsOn": ["PublicSubnetRouteTable", "PublicSubnet1"]
		},
		"PublicSubnet2RouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet2"
				},
				"RouteTableId": {
					"Ref": "PublicSubnetRouteTable"
				}
			},
			"DependsOn": ["PublicSubnetRouteTable", "PublicSubnet2"]
		},
		"PublicSubnet3RouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet3"
				},
				"RouteTableId": {
					"Ref": "PublicSubnetRouteTable"
				}
			},
			"DependsOn": ["PublicSubnetRouteTable", "PublicSubnet3"]
		},
		"EC2SecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupName": "application",
				"GroupDescription": "Access to the EC2 Instance",
				"VpcId": {
					"Ref": "ApiVPC"
				},
				"SecurityGroupIngress": [{
						"CidrIp": "0.0.0.0/0",
						"IpProtocol": "tcp",
						"FromPort": 22,
						"ToPort": 22
					},
					{
						"CidrIp": "0.0.0.0/0",
						"IpProtocol": "tcp",
						"FromPort": 80,
						"ToPort": 80
					},
					{
						"CidrIp": "0.0.0.0/0",
						"IpProtocol": "tcp",
						"FromPort": 443,
						"ToPort": 443
					},
					{
						"CidrIp": "0.0.0.0/0",
						"IpProtocol": "tcp",
						"FromPort": 5002,
						"ToPort": 5002
					}
				],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-EC2-SG"
					}
				}]
			},
			"DependsOn": "ApiVPC"
		},
		"RDSSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupName": "database",
				"GroupDescription": "Access to the RDS",
				"VpcId": {
					"Ref": "ApiVPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": 5432,
					"ToPort": 5432,
					"SourceSecurityGroupId": {
						"Fn::GetAtt": [
							"EC2SecurityGroup",
							"GroupId"
						]
					}
				}],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-RDS-SG"
					}
				}]
			},
			"DependsOn": ["ApiVPC", "EC2SecurityGroup"]
		},
		"RDSSubnetGroup": {
			"Type": "AWS::RDS::DBSubnetGroup",
			"Properties": {
				"DBSubnetGroupDescription": "RDS Subnet group for Postgres Serverless",
				"DBSubnetGroupName": {
					"Fn::Sub": "${AWS::StackName}-postgres-subnet-group"
				},
				"SubnetIds": [{
						"Ref": "PublicSubnet1"
					},
					{
						"Ref": "PublicSubnet2"
					},
					{
						"Ref": "PublicSubnet3"
					}
				],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-RDS-Subnet-Group"
					}
				}]
			},
			"DependsOn": ["PublicSubnet1", "PublicSubnet2", "PublicSubnet3"]
		},
		"RDSDBInstance": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"Engine": "postgres",
				"AllocatedStorage": {
					"Ref": "RDSAllocatedStorage"
				},
				"MultiAZ": {
					"Ref": "RDSMultiAZ"
				},
				"DBInstanceClass": {
					"Ref": "RDSInstanceClass"
				},
				"DBInstanceIdentifier": {
					"Fn::Join": [
						"-",
						[{
								"Fn::Sub": "${AWS::StackName}"
							},
							{
								"Ref": "RDSInstanceIdentifier"
							}
						]
					]

				},
				"MasterUsername": {
					"Ref": "RDSUser"
				},
				"MasterUserPassword": {
					"Ref": "RDSPassword"
				},
				"DBName": {
					"Ref": "RDSDbName"
				},
				"DBSubnetGroupName": {
					"Ref": "RDSSubnetGroup"
				},
				"VPCSecurityGroups": [{
					"Ref": "RDSSecurityGroup"
				}],
				"PubliclyAccessible": {
					"Ref": "RDSPubliclyAccessible"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-RDS-DB-Instance"
					}
				}]
			},
			"DependsOn": ["RDSSubnetGroup", "RDSSecurityGroup"]
		},
		"S3Bucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"AccessControl": "Private",
				"BucketEncryption": {
					"ServerSideEncryptionConfiguration": [{
						"ServerSideEncryptionByDefault": {
							"SSEAlgorithm": "AES256"
						}
					}]
				},
				"LifecycleConfiguration": {
					"Rules": [{
						"Id": "StorageIARule",
						"Status": "Enabled",
						"Transitions": [{
							"TransitionInDays": "30",
							"StorageClass": "STANDARD_IA"
						}]
					}]
				}
			},
			"DeletionPolicy": "Delete"
		},
		"CodeDeployEC2S3Policy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": {
					"Fn::Sub": "${AWS::StackName}-CodeDeploy-EC2-S3"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Sid": "VisualEditor0",
						"Effect": "Allow",
						"Action": [
							"s3:GetObject",
							"s3:ListBucket"
						],
						"Resource": [
							"arn:aws:s3:::codedeploy.sajalsood.me",
							"arn:aws:s3:::codedeploy.sajalsood.me/*"
						]
					},
					{
						"Effect": "Allow",
						"Action": [
							"s3:PutObject",
							"s3:GetObject",
							"s3:DeleteObject",
							"s3:ListBucket"
						],
						"Resource": [{
								"Fn::GetAtt": ["S3Bucket", "Arn"]
							},
							{
								"Fn::Join": [
									"", [{
										"Fn::GetAtt": ["S3Bucket", "Arn"]
									}, "/*"]
								]
							}
						]
					}]
				},
				"Roles": [{
					"Ref": "CodeDeployEC2ServiceRole"
				}]
			},
			"DependsOn": ["S3Bucket", "CodeDeployEC2ServiceRole"]
		},
		"CircleCIUploadToS3Policy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": {
					"Fn::Sub": "${AWS::StackName}-CircleCI-Upload-To-S3"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Sid": "VisualEditor0",
						"Effect": "Allow",
						"Action": [
							"s3:PutObject",
							"s3:GetObject",
							"s3:ListBucket"
						],
						"Resource": [
							"arn:aws:s3:::codedeploy.sajalsood.me",
							"arn:aws:s3:::codedeploy.sajalsood.me/*"
						]
					}]
				},
				"Users": ["circleci"]
			}
		},
		"CircleCICodeDeployPolicy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": {
					"Fn::Sub": "${AWS::StackName}-CircleCI-Code-Deploy"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
							"Effect": "Allow",
							"Action": [
								"codedeploy:GetApplicationRevision",
								"codedeploy:RegisterApplicationRevision"
							],
							"Resource": [
								"arn:aws:codedeploy:us-east-1:716807557558:application:csye6225-webapp"
							]
						},
						{
							"Effect": "Allow",
							"Action": [
								"codedeploy:CreateDeployment",
								"codedeploy:GetDeployment"
							],
							"Resource": [
								"*"
							]
						},
						{
							"Effect": "Allow",
							"Action": [
								"codedeploy:GetDeploymentConfig"
							],
							"Resource": [
								"arn:aws:codedeploy:us-east-1:716807557558:deploymentconfig:CodeDeployDefault.OneAtATime",
								"arn:aws:codedeploy:us-east-1:716807557558:deploymentconfig:CodeDeployDefault.HalfAtATime",
								"arn:aws:codedeploy:us-east-1:716807557558:deploymentconfig:CodeDeployDefault.AllAtOnce"
							]
						}
					]
				},
				"Users": ["circleci"]
			}
		},
		"CodeDeployEC2ServiceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": {
					"Fn::Sub": "${AWS::StackName}-CodeDeployEC2ServiceRole"
				},
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"ec2.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				}
			}
		},
		"CodeDeployServiceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": {
					"Fn::Sub": "${AWS::StackName}-CodeDeployServiceRole"
				},
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"codedeploy.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
				]
			}
		},
		"EC2S3InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeDeployEC2ServiceRole"
					}
				]
			},
			"DependsOn": ["CodeDeployEC2ServiceRole"]
		},
		"EC2Instance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"IamInstanceProfile": {
					"Ref": "EC2S3InstanceProfile"
				},
				"ImageId": {
					"Ref": "EC2AmiId"
				},
				"InstanceType": {
					"Ref": "EC2InstanceClass"
				},
				"BlockDeviceMappings": [{
					"DeviceName": {
						"Ref": "EC2DeviceName"
					},
					"Ebs": {
						"VolumeType": {
							"Ref": "EC2VolumeType"
						},
						"DeleteOnTermination": {
							"Ref": "EC2DeleteOnTermination"
						},
						"VolumeSize": {
							"Ref": "EC2VolumeSize"
						}
					}
				}],
				"KeyName": {
					"Ref": "EC2KeyName"
				},
				"SecurityGroupIds": [{
					"Ref": "EC2SecurityGroup"
				}],
				"SubnetId": {
					"Fn::Select": [{
							"Ref": "EC2SubnetChoice"
						},
						[{
								"Ref": "PublicSubnet1"
							},
							{
								"Ref": "PublicSubnet2"
							},
							{
								"Ref": "PublicSubnet3"
							}
						]
					]
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"\n", ["#!/bin/bash -xe",
								"touch /etc/profile.d/app.sh",
								{
									"Fn::Join": ["", ["echo ", {
										"Fn::Join": ["",
											[
												"export ConnectionStrings__DBConnection=",
												"\"\\\"Host=", {
													"Fn::GetAtt": ["RDSDBInstance", "Endpoint.Address"]
												},
												";Port=", {
													"Fn::GetAtt": ["RDSDBInstance", "Endpoint.Port"]
												},
												";Username=", {
													"Ref": "RDSUser"
												},
												";Password=", {
													"Ref": "RDSPassword"
												},
												";Database=", {
													"Ref": "RDSDbName"
												},
												";\\\"\""
											]
										]
									}, " >> /etc/profile.d/app.sh"]]
								},
								{
									"Fn::Join": ["", ["echo ", {
										"Fn::Join": ["",
											[
												"export S3__BUCKET_NAME=",
												{
													"Ref": "S3Bucket"
												}
											]
										]
									}, " >> /etc/profile.d/app.sh"]]
								}
							]
						]
					}
				},
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Sub": "${AWS::StackName}-EC2-Instance"
						}
					},
					{
						"Key": "EC2-Code-Deploy",
						"Value": "EC2-Code-Deploy"
					}
				]
			},
			"DependsOn": ["RDSDBInstance", "S3Bucket", "EC2S3InstanceProfile", "EC2SecurityGroup", "PublicSubnet1", "PublicSubnet2", "PublicSubnet3"]
		},
		"CodeDeployApp" : {
			"Type" : "AWS::CodeDeploy::Application",
			"Properties" : {
				"ApplicationName" : "csye6225-webapp",
				"ComputePlatform" : "Server"
			}
		},
		"CodeDeployGroup" : {
			"Type" : "AWS::CodeDeploy::DeploymentGroup",
			"Properties" : {
				"ApplicationName" : {"Ref" : "CodeDeployApp"},
				"AutoRollbackConfiguration" : {
					"Enabled" : "true",
					"Events" : ["DEPLOYMENT_FAILURE"]
				},
				"DeploymentConfigName" : "CodeDeployDefault.AllAtOnce",
				"DeploymentGroupName" : "csye6225-webapp-deployment",
				"DeploymentStyle" : {
					"DeploymentOption" : "WITHOUT_TRAFFIC_CONTROL",
					"DeploymentType" : "IN_PLACE"
				},
				"Ec2TagFilters" : [{
					"Key" : "EC2-Code-Deploy",
					"Value" : "EC2-Code-Deploy",
					"Type" : "KEY_AND_VALUE"
				}],
				"ServiceRoleArn" : {
					"Fn::GetAtt": ["CodeDeployServiceRole", "Arn"]
				}
			},
			"DependsOn": ["CodeDeployServiceRole", "CodeDeployApp"]
		}
	},
	"Outputs": {
		"VPCId": {
			"Description": "VPC Id of the newly created VPC",
			"Value": {
				"Ref": "ApiVPC"
			}
		}
	}
}